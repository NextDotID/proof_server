{:paths ["src" "jsoup"]
 :deps {etaoin/etaoin {:mvn/version "1.0.38"}
        org.clojars.askonomm/ruuter {:mvn/version "1.3.2"} 
        io.github.FieryCod/holy-lambda-babashka-tasks
        {:git/url   "https://github.com/FieryCod/holy-lambda"
         :deps/root "./modules/holy-lambda-babashka-tasks"
         :sha       "1469bb96b85c2c65a52df9e3a4914dde1b4c816f"}
        io.github.FieryCod/holy-lambda {:mvn/version "0.6.6"}}

 :min-bb-version                                    "0.3.7"
 :holy-lambda/options {;; User should use docker for local development and use `HL_NO_DOCKER` environment variable
                       ;; set to "true" for CI based deployments.
                       ;; For CI based deployments user should base it's builder image on `fierycod/graalvm-native-image:ce`
                       :docker {;; Check https://docs.docker.com/network/
                                ;; Network setting for future versions of HL will propagate to AWS SAM as well
                                ;; Options: "host"|"bridge"|"overlay"|"none"|nil|"macvlan"
                                :network            "host"

                                ;; HL runs bb tasks in docker context which means that local libraries will not work out-of-the-box.
                                ;;
                                ;; To make local libraries work with HL you have to:
                                ;; 1. Mount your local library folder as a docker volume.
                                ;; 2. Modify the `deps.edn` to use library path available in docker context.
                                ;; Preferably use `deps.edn` alias and reference it's name in `:build:clj-name`
                                ;; ----------------------------------------------------------------------------
                                ;; Single volume definition:
                                ;;
                                ;; {:docker "/path-where-to-mount-local-library-on-docker"
                                ;;  :host   "relative-local-library-path"}
                              ;;:volumes [{:docker     "/holy-lambda" 
                              ;;           :host       "./"}]

                                ;; GraalVM Community holy-lambda compatible docker image
                                ;; You can always build your own GraalVM image with enterprise edition
                                :image              "dlbears/graalvm-native-image:ee"}
                       :build {:compile-cmd "clj -T:build uberjar"
                               :graalvm-home nil}
                       :runtime
                       {;; :pods                {org.babashka/aws "0.0.5"}

                        ;; For `:native` runtime you can provide your own bootstrap file
                     ;;    :bootstrap-file "bootstrap"

                        ;; For `:native` runtime you can provide some native resources which will be available during lambda execution
                        ;; Resources are packed as is.
                        :native-deps "resources"

                        ;; Specify custom arguments for native image generation
                        ;; Works only on `:native` runtime.
                        ;; Check https://www.graalvm.org/reference-manual/native-image/Options/
                        :native-image-args
                        ["--verbose"
                         ;"-H:+StaticExecutableWithDynamicLibC" ; aarch64 and x86
                         ;"--static" ; x86 only
                         ;"--libc=musl" ; x86 only
                         "--gc=epsilon" ; [ g1 (x86 only), serial, epsilon ]
                         "--no-fallback"
                         "--enable-url-protocols=http,https"
                         "--report-unsupported-elements-at-runtime"
                         "-H:+AllowIncompleteClasspath"
                         "--no-server"
                         "--initialize-at-build-time"
                         "--initialize-at-run-time=org.httpkit.client.ClientSslEngineFactory\\$SSLHolder,org.apache.http.impl.auth.NTLMEngineImpl"
                         "--trace-object-instantiation=java.security.SecureRandom"]}}
 :tasks {:requires                                ([holy-lambda.tasks])

         hl:docker:run             holy-lambda.tasks/hl:docker:run

         hl:native:conf            holy-lambda.tasks/hl:native:conf
         hl:native:executable      holy-lambda.tasks/hl:native:executable
         hl:babashka:sync          holy-lambda.tasks/hl:babashka:sync
         hl:sync                   holy-lambda.tasks/hl:sync
         hl:compile                holy-lambda.tasks/hl:compile
         hl:doctor                 holy-lambda.tasks/hl:doctor
         hl:clean                  holy-lambda.tasks/hl:clean
         hl:version                holy-lambda.tasks/hl:version}}